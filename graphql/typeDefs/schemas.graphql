# Schema User ---------------------------------------------------------------------------------------
type User {
  id: ID!
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  token: String
  restaurants: [Restaurant]!
} 
input RegisterInput {
  firstname: String!
  lastname: String!
  email: String!
  password: String! 
  confirmPassword : String!
}
input LoginInput {
  email: String!
  password: String!
}
input UpdateUser {
  firstname: String!
  lastname: String!
  email: String!
  restaurants: [ID!]!
}
input DeleteUser {
  id: ID!
} 

type Query { 
  getUser(userId : ID!): User!
  getUsers: [User!]!
}

type Mutation {
  registerUser(registerInput: RegisterInput!): User!
  loginUser(loginInput: LoginInput): User!
  updateUser(userId : ID!, updateUserInput: UpdateUser!): User!
  deleteUser(deleteUserInput: DeleteUser!): User!
}

# Schema Restaurant ---------------------------------------------------------------------------------------
type Restaurant {
  _id: ID!
  name: String!
  admin: User!
  products: [Product!]!
  turnoversRestaurantYear: [TurnoversRestaurantYear!]!

} 
type TurnoversRestaurantYear {
  id: ID
  createdAt: String!, 
  turnoverYear: Int!,
  totalSales: Int!,
} 
input CreateRestaurant {
  name: String!
}

type Query {
  getRestaurant(restaurantId : ID!): Restaurant!
  getRestaurants: [Restaurant!]!
}
type Mutation {
  createRestaurant(createRestaurantInput: CreateRestaurant!): Restaurant!
  updateRestaurant(restaurantId : ID!, createRestaurantInput: CreateRestaurant!): Restaurant!
  deleteRestaurant(restaurantId: ID!): Restaurant
}
# Schema Product ---------------------------------------------------------------------------------------
type Product {
  id: ID
  name: String!,
  unitSalePrice: Int!,
  stock: Int
  turnoversProductMonth: [TurnoversProductMonth!]!
  turnoversProductYear: [TurnoversProductYear!]!,
  category: String
  status: String!
  delivery: Int
  omSite: Int
} 

type TurnoversProductYear {
  id: ID
  createdAt: String, 
  turnoverYear: Int!,
  totalSales: Int!,
} 
type TurnoversProductMonth {
  id: ID
  income: Int!,
  year: String!,
  month: String!,
  day: String!,
  sales: Int!,

} 

enum STATUS { 
  draft
  published
}
enum CATEGORY {
  none
  drink
  food
  other
} 
input CreateProduct {
  name: String!,
  unitSalePrice: Int!,
  category: CATEGORY!
} 
input UpdateProduct {
  name: String!,
  status: STATUS!
  category: CATEGORY!
} 
input SoldProduct {
  unitProductSold: Int!, 
} 

type Query {
  getProduct(restaurantId : ID!, productId: ID!): Product!
  getProducts(restaurantId : ID!): [Product!]!

}
type Mutation {
  createProduct(restaurantId: ID!, createProductInput: CreateProduct! ): Restaurant!
  updateProduct(restaurantId : ID!, productId: ID!, updateProductInput: UpdateProduct!): Restaurant!
  soldProduct(restaurantId : ID!, productId: ID!, soldProductInput: SoldProduct!): Restaurant!
  deleteProduct(restaurantId: ID!, productId: ID! ): Restaurant!
}



